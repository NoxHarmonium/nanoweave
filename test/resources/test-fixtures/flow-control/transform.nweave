{
  "fib(10)": let fib = (x) -> (when
    x < 3: 1,
    else: fib(x - 1) + fib(x - 2)
  ): fib(10),
  "match array": [1, 2, 3] match {
    []: "a",
    [1, 2]: "b",
    ^[head, tail]: "head: #{head} tail: #{tail}"
  },
  "match type string": typeof 1 match {
    "class java.lang.Double": "it's a double!"
  },
  // Thanks: http://learnyouahaskell.com/recursion#quick-sort
  sorted: let quicksort = (y) ->
    (y match {
      []: [],
      ^[head, tail]: let
        smallerSorted = quicksort(tail filter #(%1 <= head)),
        biggerSorted = quicksort(tail filter #(%1 > head)):
          smallerSorted ++ [head] ++ biggerSorted
    }): quicksort(input.to_sort)
}
